on:
  pull_request:
    paths-ignore:
      - '**/*.md'
name: Test
env:
  CACHE_GENERATION: 0
jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Rust
      id: toolchain
      uses: actions-rs/toolchain@v1
    - name: Add wasm32-wasi Rust target
      run: rustup target add wasm32-wasi
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          test-fixtures/target/
        key: ${{ runner.os }}-cargo-v${{ env.CACHE_GENERATION }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Install rustfmt
      run: rustup component add rustfmt
      shell: bash
    - name: Check formatting
      run: cargo fmt --all -- --check
      shell: bash
    - name: test
      run: make ci
      shell: bash

  # Run the trap test in an isolated job. It needs different cargo features than the usual build, so
  # it entails rebuilding the whole workspace if we combine them in a single job. This way, we
  # achieve some parallelism via Actions jobs.
  trap-test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      id: toolchain
    - name: Add wasm32-wasi Rust target
      run: rustup target add wasm32-wasi
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          cli/tests/trap-test/target/
          test-fixtures/target/
        key: ${{ runner.os }}-cargo-trap-v${{ env.CACHE_GENERATION }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
    - name: trap-test
      run: make trap-test-ci
      shell: bash

  package-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install latest Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true
      - name: Check crates can be published
        run: make package-check
        shell: bash
